import os
import json
import sys
try:
    from aceinna.devices.parsers.open_packet_parser import (
        match_command_handler, common_continuous_parser)
except:  # pylint: disable=bare-except
    sys.path.append('./src')
    from aceinna.devices.parsers.open_packet_parser import (
        match_command_handler, common_continuous_parser)


APP_NAME = 'IMU'
APP_FILE_PATH = os.path.join(
    os.getcwd(), 'setting', 'openimu', APP_NAME, 'openimu.json')
PROPERTIES = None
with open(APP_FILE_PATH) as json_data:
    PROPERTIES = json.load(json_data)


def parse_command_data(packet_type, payload):
    payload_parser = match_command_handler(packet_type)
    return payload_parser(payload, PROPERTIES['userConfiguration'])


def parse_continuous_data(packet_type, payload):
    payload_parser = common_continuous_parser(packet_type)
    output_packet_config = next(
        (x for x in PROPERTIES['userMessages']['outputPackets']
         if x['name'] == packet_type), None)

    return payload_parser(payload, output_packet_config)


if __name__ == '__main__':
    # raw data need to be parsed, only need payload, don't contains prefix, packet type, packet length
    sample_data = [0xC7, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x58, 0x2B, 0x59, 0x2B, 0x5A, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x4B]
    # parse command data
    print(parse_command_data('gA', sample_data))

    # parse continuous dataa
    # print(parse_continuous_data('z1', []))
