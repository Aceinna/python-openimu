import socketimport timeclass netbios_query:    def __init__(self,name,ip_address_list):        self.name = name        self.ip_address_list = ip_address_list        self.__populate()    def __populate(self):        self.boardcast_address_list = []        for ip_address in self.ip_address_list:            split_items = ip_address.split('.')            split_items[3] = '255'            boardcast_address = '.'.join(split_items)            self.boardcast_address_list.append(boardcast_address)        self.port = 137         self.nqs = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)        self.nqs.setblocking(False)        self.query_data = [        b"\xa9\xfb",  # Transaction ID        b"\x01\x10",  # Flags Query        b"\x00\x01",  # Question:1        b"\x00\x00",  # Answer RRS        b"\x00\x00",  # Authority RRS        b"\x00\x00",  # Additional RRS        b"\x20",      # length of Name:32        b"NAME",      # Name           b"\x00",      # NameNull        b"\x00\x20",  # Query Type:NB        b"\x00\x01"] # Class        self.query_data[7] = str.encode(self.__netbios_encode(self.name))    def __netbios_encode(self,src):            src = src.ljust(15,"\x20")        src = src.ljust(16,"\x00")        names = []        for c in src:            char_ord = ord(c)            high_4_bits = char_ord >> 4            low_4_bits = char_ord & 0x0f            names.append(high_4_bits)            names.append(low_4_bits)            res = ""            for name in names:            res += chr(0x41+name)        return res    def query(self):        wait_count = 10        send_data = []        ret = None        for bytes_ele in self.query_data:            for list_ele in bytes_ele:                send_data.append(list_ele)        while wait_count:            for boardcast_address in boardcast_address_list:                try:                    self.nqs.sendto(bytes(send_data), (self.boardcast_address, self.port))                    data_rev, ADDR = self.nqs.recvfrom(1024)                except:                    time.sleep(1)                    continue                if(len(data_rev) > 0):                    ret = boardcast_address                    break            if ret:                break            else:                wait_count -= 1                self.nqs.close()        return ret